{
    "cells": [
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "# Python Data Structures and Their Features\n",
       "\n",
       "This notebook covers the features of Python data structures: strings, lists, sets, tuples, dictionaries, and comprehensions."
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 1. Strings\n",
       "Strings are sequences of characters enclosed in single, double, or triple quotes."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# String example\n",
       "s = \"Hello, World!\"\n",
       "print(\"String:\", s)\n",
       "print(\"Length of string:\", len(s))\n",
       "print(\"Uppercase:\", s.upper())\n",
       "print(\"Lowercase:\", s.lower())\n",
       "print(\"Replace 'World' with 'Python':\", s.replace(\"World\", \"Python\"))\n",
       "print(\"Split string by comma:\", s.split(\",\"))"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 2. Lists\n",
       "Lists are ordered, mutable collections of items."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# List example\n",
       "my_list = [1, 2, 3, \"Python\", 4.5]\n",
       "print(\"List:\", my_list)\n",
       "print(\"First element:\", my_list[0])\n",
       "print(\"Last element:\", my_list[-1])\n",
       "my_list.append(6)\n",
       "print(\"After appending 6:\", my_list)\n",
       "my_list.remove(\"Python\")\n",
       "print(\"After removing 'Python':\", my_list)\n",
       "print(\"Sliced list (first 3 elements):\", my_list[:3])"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 3. Sets\n",
       "Sets are unordered collections of unique elements."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Set example\n",
       "my_set = {1, 2, 3, 4, 2, 3}\n",
       "print(\"Set:\", my_set)\n",
       "my_set.add(5)\n",
       "print(\"After adding 5:\", my_set)\n",
       "my_set.remove(2)\n",
       "print(\"After removing 2:\", my_set)\n",
       "print(\"Intersection with {3, 4, 5}:\", my_set.intersection({3, 4, 5}))"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 4. Tuples\n",
       "Tuples are ordered, immutable collections of items."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Tuple example\n",
       "my_tuple = (1, 2, 3, \"Python\")\n",
       "print(\"Tuple:\", my_tuple)\n",
       "print(\"Second element:\", my_tuple[1])\n",
       "print(\"Sliced tuple (last 2 elements):\", my_tuple[-2:])\n",
       "# my_tuple[0] = 10  # This will raise an error since tuples are immutable"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 5. Dictionaries\n",
       "Dictionaries are unordered collections of key-value pairs."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# Dictionary example\n",
       "my_dict = {\"name\": \"Alice\", \"age\": 25, \"city\": \"New York\"}\n",
       "print(\"Dictionary:\", my_dict)\n",
       "print(\"Value for key 'name':\", my_dict[\"name\"])\n",
       "my_dict[\"age\"] = 26\n",
       "print(\"After updating age:\", my_dict)\n",
       "my_dict[\"country\"] = \"USA\"\n",
       "print(\"After adding country:\", my_dict)\n",
       "print(\"Keys:\", my_dict.keys())\n",
       "print(\"Values:\", my_dict.values())"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## 6. Comprehensions\n",
       "Comprehensions provide a concise way to create lists, sets, and dictionaries."
      ]
     },
     {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
       "# List comprehension\n",
       "squares = [x**2 for x in range(1, 6)]\n",
       "print(\"List comprehension (squares):\", squares)\n",
       "\n",
       "# Set comprehension\n",
       "even_squares = {x**2 for x in range(1, 6) if x % 2 == 0}\n",
       "print(\"Set comprehension (even squares):\", even_squares)\n",
       "\n",
       "# Dictionary comprehension\n",
       "square_dict = {x: x**2 for x in range(1, 6)}\n",
       "print(\"Dictionary comprehension (square dict):\", square_dict)"
      ]
     },
     {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
       "## Conclusion\n",
       "This notebook covered the basics of Python data structures and their features. Run each cell to see the outputs!"
      ]
     }
    ],
    "metadata": {
     "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
     },
     "language_info": {
      "codemirror_mode": {
       "name": "ipython",
       "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
     }
    },
    "nbformat": 4,
    "nbformat_minor": 4
   }